import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
import datetime
from fpdf import FPDF
import base64

# Load the trained model
model = tf.keras.models.load_model("CropCure_model.h5")

def format_class_name(raw_name):
    # Replace underscores and remove redundant "Tomato_Tomato" or "Potato_Potato"
    name = raw_name.replace("___", " - ").replace("__", " - ").replace("_", " ")
    name = name.replace("Tomato Tomato", "Tomato").replace("Potato Potato", "Potato").replace("Pepper bell", "Bell Pepper")
    return name.strip().title()

def get_disease_icon(cls):
    cls = cls.lower()
    if "healthy" in cls:
        return "ЁЯЯв"
    elif "blight" in cls:
        return "ЁЯНВ"
    elif "virus" in cls:
        return "ЁЯзм"
    elif "bacterial" in cls:
        return "ЁЯжа"
    elif "mite" in cls:
        return "ЁЯк│"
    else:
        return "ЁЯМ┐"



# Class names (same order as training)
class_names_en = [
    'Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy',
    'Potato___Early_blight', 'Potato___healthy', 'Potato___Late_blight',
    'Tomato_Target_Spot', 'Tomato_Tomato_mosaic_virus', 'Tomato_Tomato_YellowLeaf_Curl_Virus',
    'Tomato_Bacterial_spot', 'Tomato_Early_blight', 'Tomato_healthy',
    'Tomato_Late_blight', 'Tomato_Leaf_Mold', 'Tomato_Septoria_leaf_spot',
    'Tomato_Spider_mites_Two_spotted_spider_mite'
]

# Translated class names
class_translations = {
    "родрооро┐ро┤рпН": [
        "рооро┐ро│роХро╛ропрпН рокро╛роХрпНроЯрпАро░ро┐ропро╛ рокрпБро│рпНро│ро┐", "рооро┐ро│роХро╛ропрпН роЖро░рпЛроХрпНроХро┐ропроорпН", "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ роЖро░роорпНрок рокрпНро│рпИроЯрпН",
        "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ роЖро░рпЛроХрпНроХро┐ропроорпН", "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ родро╛роород рокрпНро│рпИроЯрпН", "родроХрпНроХро╛ро│ро┐ роЗро▓роХрпНроХрпБ рокрпБро│рпНро│ро┐",
        "родроХрпНроХро╛ро│ро┐ роорпЛроЪрпИроХрпН ро╡рпИро░ро╕рпН", "родроХрпНроХро╛ро│ро┐ роороЮрпНроЪро│рпН роЗро▓рпИ роЪрпБро░рпБро│рпН ро╡рпИро░ро╕рпН", "родроХрпНроХро╛ро│ро┐ рокро╛роХрпНроЯрпАро░ро┐ропро╛ рокрпБро│рпНро│ро┐",
        "родроХрпНроХро╛ро│ро┐ роЖро░роорпНрок рокрпНро│рпИроЯрпН", "родроХрпНроХро╛ро│ро┐ роЖро░рпЛроХрпНроХро┐ропроорпН", "родроХрпНроХро╛ро│ро┐ родро╛роород рокрпНро│рпИроЯрпН", "родроХрпНроХро╛ро│ро┐ роЗро▓рпИ рокрпВроЮрпНроЪрпИ",
        "родроХрпНроХро╛ро│ро┐ роЪрпЖрокрпНроЯрпЛро░ро┐ропро╛ роЗро▓рпИ рокрпБро│рпНро│ро┐", "родроХрпНроХро╛ро│ро┐ роЗро░рогрпНроЯрпБ рокрпБро│рпНро│ро┐ роЗро▓рпИ роКроЪро┐роХро│рпН"
    ],
    "рд╣рд┐рдиреНрджреА": [
        "рдорд┐рд░реНрдЪ рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ", "рдорд┐рд░реНрдЪ рд╕реНрд╡рд╕реНрде", "рдЖрд▓реВ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЭреБрд▓рд╕рд╛", "рдЖрд▓реВ рд╕реНрд╡рд╕реНрде",
        "рдЖрд▓реВ рджреЗрд░ рд╕реЗ рдЭреБрд▓рд╕рд╛", "рдЯрдорд╛рдЯрд░ рд▓рдХреНрд╖реНрдп рдзрдмреНрдмрд╛", "рдЯрдорд╛рдЯрд░ рдореЛрдЬрд╝реЗрдХ рд╡рд╛рдпрд░рд╕", "рдЯрдорд╛рдЯрд░ рдкреАрд▓реА рдкрддреНрддреА рдХрд░реНрд▓ рд╡рд╛рдпрд░рд╕",
        "рдЯрдорд╛рдЯрд░ рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ", "рдЯрдорд╛рдЯрд░ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЭреБрд▓рд╕рд╛", "рдЯрдорд╛рдЯрд░ рд╕реНрд╡рд╕реНрде", "рдЯрдорд╛рдЯрд░ рджреЗрд░ рд╕реЗ рдЭреБрд▓рд╕рд╛",
        "рдЯрдорд╛рдЯрд░ рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдлрдлреВрдВрджреА", "рдЯрдорд╛рдЯрд░ рд╕реЗрдкреНрдЯреЛрд░рд┐рдпрд╛ рдкрддреНрддреА рдзрдмреНрдмрд╛", "рдЯрдорд╛рдЯрд░ рд╕реНрдкрд╛рдЗрдбрд░ рдорд╛рдЗрдЯреНрд╕"
    ]
}

# Disease info (translated)
disease_info = {
    'Pepper__bell___Bacterial_spot': {
        "en": "Causes leaf and fruit lesions.",
        "ta": "роЗро▓рпИ рооро▒рпНро▒рпБроорпН рокро┤роЩрпНроХро│ро┐ро▓рпН рокрпБро│рпНро│ро┐роХро│рпН роПро▒рпНрокроЯрпБроХро┐ройрпНро▒рой.",
        "hi": "рдкрддреНрддрд┐рдпреЛрдВ рдФрд░ рдлрд▓реЛрдВ рдкрд░ рдзрдмреНрдмреЗ рд╣реЛрддреЗ рд╣реИрдВред"
    },
    'Pepper__bell___healthy': {
        "en": "This is a healthy leaf.",
        "ta": "роЗродрпБ роТро░рпБ роЖро░рпЛроХрпНроХро┐ропрооро╛рой роЗро▓рпИ.",
        "hi": "рдпрд╣ рдПрдХ рд╕реНрд╡рд╕реНрде рдкрддреНрддрд╛ рд╣реИред"
    },
    'Potato___Early_blight': {
        "en": "Fungal disease with concentric rings.",
        "ta": "роорпИропроХрпН роХрпЛроЯрпБроХро│рпН роХрпКрогрпНроЯ рокрпВроЮрпНроЪрпИ роирпЛропрпН.",
        "hi": "рдХреЗрдВрджреНрд░рд┐рдд рдЫрд▓реНрд▓реЛрдВ рд╡рд╛рд▓рд╛ рдлрдВрдЧрд▓ рд░реЛрдЧред"
    },
    'Potato___healthy': {
        "en": "This potato leaf is healthy.",
        "ta": "роЗродрпБ роЖро░рпЛроХрпНроХро┐ропрооро╛рой роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ роЗро▓рпИ.",
        "hi": "рдпрд╣ рдЖрд▓реВ рдХрд╛ рдкрддреНрддрд╛ рд╕реНрд╡рд╕реНрде рд╣реИред"
    },
    'Potato___Late_blight': {
        "en": "Severe leaf rot, fast spreading.",
        "ta": "родрпАро╡ро┐ро░ роЗро▓рпИ роЕро┤рпБроХро▓рпН, ро╡ро┐ро░рпИро╡ро┐ро▓рпН рокро░ро╡рпБроорпН.",
        "hi": "рдЧрдВрднреАрд░ рдкрддреНрддреА рд╕рдбрд╝рди, рддреЗрдЬреА рд╕реЗ рдлреИрд▓рддрд╛ рд╣реИред"
    },
    'Tomato_Target_Spot': {
        "en": "Necrotic rings on leaves.",
        "ta": "роЗро▓рпИроХро│ро┐ро▓рпН ро╡ро▒рогрпНроЯ ро╡роЯрпНроЯроЩрпНроХро│рпН.",
        "hi": "рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдореГрдд рдКрддрдХ рд╡рд╛рд▓реЗ рд╡рд▓рдпред"
    },
    'Tomato_Tomato_mosaic_virus': {
        "en": "Causes leaf discoloration and stunting.",
        "ta": "роЗро▓рпИ ро╡рогрпНрогрооро╛ро▒рпНро▒роорпН рооро▒рпНро▒рпБроорпН ро╡ро│ро░рпНроЪрпНроЪро┐ родроЯрпБрокрпНрокрпБ.",
        "hi": "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рд░рдВрдЧ рдмрджрд▓рдирд╛ рдФрд░ рд╡реГрджреНрдзрд┐ рд░реБрдХрдирд╛ред"
    },
    'Tomato_Tomato_YellowLeaf_Curl_Virus': {
        "en": "Yellowing and curling of leaves.",
        "ta": "роЗро▓рпИроХро│рпН роороЮрпНроЪро│рпНрокроЯрпБродро▓рпН рооро▒рпНро▒рпБроорпН роЪрпБро░рпБроХрпНроХроорпН.",
        "hi": "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рдкреАрд▓рд╛ рд╣реЛрдирд╛ рдФрд░ рдореБрдбрд╝рдирд╛ред"
    },
    'Tomato_Bacterial_spot': {
        "en": "Dark water-soaked lesions on leaves.",
        "ta": "роЗро▓рпИроХро│ро┐ро▓рпН роЗро░рпБрогрпНроЯ роирпАро░рпН рокрпБро│рпНро│ро┐роХро│рпН.",
        "hi": "рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдЧрд╣рд░реЗ рдкрд╛рдиреА рдЬреИрд╕реЗ рдзрдмреНрдмреЗред"
    },
    'Tomato_Early_blight': {
        "en": "Dark spots with concentric rings.",
        "ta": "роорпИроп роХрпЛроЯрпБроХро│рпБроЯройрпН роЗро░рпБрогрпНроЯ рокрпБро│рпНро│ро┐роХро│рпН.",
        "hi": "рдХреЗрдВрджреНрд░рд┐рдд рд╡рд▓рдпреЛрдВ рдХреЗ рд╕рд╛рде рдЧрд╣рд░реЗ рдзрдмреНрдмреЗред"
    },
    'Tomato_healthy': {
        "en": "This tomato leaf is healthy.",
        "ta": "роЗродрпБ роЖро░рпЛроХрпНроХро┐ропрооро╛рой родроХрпНроХро╛ро│ро┐ роЗро▓рпИ.",
        "hi": "рдпрд╣ рдЯрдорд╛рдЯрд░ рдХрд╛ рдкрддреНрддрд╛ рд╕реНрд╡рд╕реНрде рд╣реИред"
    },
    'Tomato_Late_blight': {
        "en": "Rapid leaf rot in humid areas.",
        "ta": "роИро░рокрпНрокродрооро╛рой роЗроЯроЩрпНроХро│ро┐ро▓рпН ро╡ро┐ро░рпИро╡ро╛роХ роЗро▓рпИ роЕро┤рпБроХро▓рпН.",
        "hi": "рдирдореА рдореЗрдВ рддреЗрдЬ рдкрддреНрддреА рд╕рдбрд╝рдиред"
    },
    'Tomato_Leaf_Mold': {
        "en": "Yellow spots with fuzzy mold.",
        "ta": "роороЮрпНроЪро│рпН рокрпБро│рпНро│ро┐роХро│рпБроЯройрпН рокрпВроЮрпНроЪрпИ.",
        "hi": "рдкреАрд▓реЗ рдзрдмреНрдмреЛрдВ рдХреЗ рд╕рд╛рде рдлрдлреВрдВрджреАред"
    },
    'Tomato_Septoria_leaf_spot': {
        "en": "Gray centers with brown borders.",
        "ta": "роЪро╛роорпНрокро▓рпН роироЯрпБ рооро▒рпНро▒рпБроорпН рокро┤рпБрокрпНрокрпБ ро╡ро┐ро│ро┐роорпНрокрпБ.",
        "hi": "рднреВрд░реЗ рдХрд┐рдирд╛рд░реЗ рд╡рд╛рд▓реЗ рдЧреНрд░реЗ рдХреЗрдВрджреНрд░ред"
    },
    'Tomato_Spider_mites_Two_spotted_spider_mite': {
        "en": "Webbing and speckled leaves.",
        "ta": "ро╡ро▓рпИ рооро▒рпНро▒рпБроорпН рокрпБро│рпНро│ро┐ропрпБро│рпНро│ роЗро▓рпИроХро│рпН.",
        "hi": "рдЬрд╛рд▓реЗ рдФрд░ рдзрдмреНрдмреЗрджрд╛рд░ рдкрддреНрддреЗред"
    }
}

# Cure tips based on keywords
tips = {
    'healthy': {
        "en": "тЬЕ Keep monitoring. No action needed.",
        "ta": "тЬЕ родрпКроЯро░рпНроирпНродрпБ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН. роОроЪрпНроЪро░ро┐роХрпНроХрпИ родрпЗро╡рпИропро┐ро▓рпНро▓рпИ.",
        "hi": "тЬЕ рдирд┐рдЧрд░рд╛рдиреА рд░рдЦреЗрдВред рдХреЛрдИ рдХрд╛рд░реНрдп рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВред"
    },
    'blight': {
        "en": "ЁЯзк Apply fungicide. Avoid overhead watering.",
        "ta": "ЁЯзк рокрпВроЮрпНроЪрпИроХрпН роХрпКро▓рпНро▓ро┐ родрпЖро│ро┐роХрпНроХро╡рпБроорпН. роорпЗро▓рпН роирпАро░рпНрокро╛ропрпНро╡рпБ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН.",
        "hi": "ЁЯзк рдлрдлреВрдВрджрдирд╛рд╢рдХ рдЫрд┐рдбрд╝рдХреЗрдВред рдКрдкрд░ рд╕реЗ рд╕рд┐рдВрдЪрд╛рдИ рди рдХрд░реЗрдВред"
    },
    'virus': {
        "en": "ЁЯЫС Remove infected plants. Use resistant varieties.",
        "ta": "ЁЯЫС рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯро╡рпИ роЕроХро▒рпНро▒ро╡рпБроорпН. роОродро┐ро░рпНрокрпНрокрпБ ро╡роХрпИроХро│рпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.",
        "hi": "ЁЯЫС рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВред рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЗрдВ рд▓рдЧрд╛рдПрдВред"
    },
    'bacterial': {
        "en": "ЁЯз╝ Remove debris. Use copper sprays.",
        "ta": "ЁЯз╝ рокроЪрпИроХро│рпН роЕроХро▒рпНро▒ро╡рпБроорпН. роХро╛рокрпНрокро░рпН ро╕рпНрокрпНро░рпЗ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.",
        "hi": "ЁЯз╝ рдорд▓рдмрд╛ рд╣рдЯрд╛рдПрдВред рдХреЙрдкрд░ рд╕реНрдкреНрд░реЗ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
    },
    'spot': {
        "en": "ЁЯМ┐ Improve airflow. Use organic spray.",
        "ta": "ЁЯМ┐ роХро╛ро▒рпНро▒рпЛроЯрпНроЯроорпН роорпЗроорпНрокроЯрпБродрпНродро╡рпБроорпН. роЗропро▒рпНроХрпИ ро╕рпНрокрпНро░рпЗ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.",
        "hi": "ЁЯМ┐ рд╡рд╛рдпреБ рдкреНрд░рд╡рд╛рд╣ рд╕реБрдзрд╛рд░реЗрдВред рдЬреИрд╡рд┐рдХ рд╕реНрдкреНрд░реЗ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
    },
    'mold': {
        "en": "ЁЯТз Reduce humidity. Space plants well.",
        "ta": "ЁЯТз роИро░рокрпНрокродроорпН роХрпБро▒рпИроХрпНроХро╡рпБроорпН. роЗроЯрпИро╡рпЖро│ро┐ ро╡рпИроХрпНроХро╡рпБроорпН.",
        "hi": "ЁЯТз рдирдореА рдХрдо рдХрд░реЗрдВред рдкреМрдзреЛрдВ рдХреЗ рдмреАрдЪ рджреВрд░реА рд░рдЦреЗрдВред"
    },
    'mite': {
        "en": "ЁЯк▓ Use miticides. Remove webbing.",
        "ta": "ЁЯк▓ роорпИроЯро┐роЪрпИроЯрпБ родрпЖро│ро┐роХрпНроХро╡рпБроорпН. ро╡ро▓рпИ роЕроХро▒рпНро▒ро╡рпБроорпН.",
        "hi": "ЁЯк▓ рдорд╛рдЗрдЯрд┐рд╕рд╛рдЗрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдЬрд╛рд▓ рд╣рдЯрд╛рдПрдВред"
    }
}

# Helper to get translated class name
def translate_class(cls, lang):
    if lang == "English (default)":
        return cls
    idx = class_names_en.index(cls)
    return class_translations[lang][idx]

# Helper to get tip by keyword match
def get_tip(cls, lang_code):
    cls = cls.lower()
    for key in tips:
        if key in cls:
            return tips[key][lang_code]
    return tips['healthy'][lang_code]

# ---------------- STREAMLIT APP ------------------

st.set_page_config(page_title="CropCure Pro ЁЯМ┐", layout="wide", page_icon="ЁЯМ╛")
st.sidebar.image("https://cdn-icons-png.flaticon.com/512/7661/7661364.png", width=80)
st.sidebar.title("ЁЯМ┐ CropCure Pro")
lang = st.sidebar.selectbox("ЁЯМР Choose Language", ["English (default)", "родрооро┐ро┤рпН", "рд╣рд┐рдиреНрджреА"])

st.title("ЁЯМ▒ AI-Powered Plant Disease Detector")
st.caption("Upload a leaf image to detect disease and receive treatment suggestions.")

uploaded_file = st.file_uploader("ЁЯУд Upload a plant leaf image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    st.image(uploaded_file, caption="ЁЯУ╖ Uploaded Image", use_container_width=True)

    img = image.load_img(uploaded_file, target_size=(128, 128))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    top_indices = prediction[0].argsort()[-3:][::-1]

    st.divider()
    st.subheader("ЁЯФН Top 3 Predictions")
    for i, idx in enumerate(top_indices):
        name = format_class_name(translate_class(class_names_en[idx], lang))
        conf = prediction[0][idx] * 100
        st.write(f"**#{i+1} тЖТ {name}** тАФ `{conf:.2f}%`")

    best_cls = class_names_en[top_indices[0]]
    best_conf = prediction[0][top_indices[0]] * 100
    lang_code = {"English (default)": "en", "родрооро┐ро┤рпН": "ta", "рд╣рд┐рдиреНрджреА": "hi"}[lang]

    import pandas as pd
    top_preds = {
    format_class_name(translate_class(class_names_en[i], lang)): round(prediction[0][i] * 100, 2)
    for i in top_indices
    }
    st.subheader("ЁЯУК Confidence Comparison")
    st.bar_chart(pd.DataFrame.from_dict(top_preds, orient='index'))


   
    icon = get_disease_icon(best_cls)
    st.success(f"{icon} **Prediction:** {format_class_name(translate_class(best_cls, lang))}")

    st.progress(int(best_conf))
    st.info(f"ЁЯУК **Confidence:** `{best_conf:.2f}%`")

    with st.container():
        st.markdown(
        f"""
        <div style="background-color:#f1fdf6;padding:20px 25px;border-radius:15px;border:1px solid #c8eac8;">
            <h4 style="color:#228b22;margin-bottom:10px;">ЁЯМ┐ Final Diagnosis Summary</h4>
            <p><b>Disease:</b> {format_class_name(translate_class(best_cls, lang))}</p>
            <p><b>Confidence:</b> {best_conf:.2f}%</p>
            <p><b>Tip:</b> {get_tip(best_cls, lang_code)}</p>
        </div>
        """, unsafe_allow_html=True
    )


    st.markdown("### ЁЯзм Disease Info")
    st.write(disease_info.get(best_cls, {}).get(lang_code, "Info not available."))

    st.markdown("### ЁЯТб Cure Tip")
    st.warning(get_tip(best_cls, lang_code))

    st.caption("ЁЯХТ Prediction time: " + datetime.datetime.now().strftime("%d-%m-%Y %I:%M %p"))
    







